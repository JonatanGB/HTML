{
    <form>
        Inicial
        <input type="number" name="inicial" id="inicial" value="1000"><br><br>

        Juros
        <input type="number" name="juros" id="juros" value="5"><br><br>

        Mêses
        <input type="number" name="meses" id="meses" value="12">
    </form>
    <p class="resultado">Resultao: R$ 0,00</p> 
    <script>

    let inicial = document.querySelector("#inicial")
        let juros = document.querySelector("#juros")
        let meses = document.querySelector("#meses")
        let resultado = document.querySelector(".resultado")

        meses = meses /12 

        function calcula(i, j, a){
            let din = Math.round(i * (1 + (j / 100) * (a / 12)))
            console.log(din)
        }

        inicial.addEventListener("input", (event) => {
            console.log(inicial.)
        })
}


{
        function quandoFoi(data){
            let agora = new Date()
            if(agora.getTime() - 1000 < data.getTime()) console.log("Foi agora")
            else if(agora.getTime() -60000 < data.getTime()) console.log(`${Math.floor((agora.getTime() - data.getTime())/1000)} segundos atras`)
            else if (agora.getTime() - 3600000 < data.getTime()) console.log(`${Math.floor((agora.getTime() - data.getTime())/60000)} minutos atras`)
            else console.log(`${data.getDate()}.${data.getMonth()}.${data.getFullYear()} ${data.getHours()}:${data.getMinutes()}`)
        }
}


set:
        function unicos(vetor) {
            let set = new Set(vetor)
            let noRepeat = []
            for(let item of set) {
                noRepeat.push(item)
            }
            return noRepeat
        }


Aula 42:
    propriedades estaticas:
            /*
                    class ponto2d{
                constructor (x, y){
                    this.coorX = x
                    this.coorY = y
                }

                static temEixoComum(pontoA, pontoB){
                    if (pontoA.coorX == pontoB.coorX || pontoA.coorY == pontoB.coorY) return true
                    return false
                }
            }

            let opa = new ponto2d(5, 9)
            let oba = new ponto2d(5, 9)
            console.log(ponto2d.temEixoComum(opa, oba))
            */

            /*
                    class Calc{
                static soma(A, B){
                    return A + B
                }
                
                static subtracao(A, B){
                    return A - B
                }

                static multiplicacao(A, B){
                    return A * B
                }

                static divisao(A, B){
                    return A / B
                }

            }
            */


    polimorfismo:
            class Produto{

                #descricao

                constructor(nomeLoja, preço, descrição){
                    this.nomeLoja = nomeLoja
                    this.preço = preço
                    this.#descricao = "produto de informatica"
                }

                get descricao(){
                    return this.#descricao
                }

                getDescrição(){
                    return this.descricao
                }
            }

            class Mouse extends Produto{
                constructor(nomeLoja, preço, descrição, tipo){
                    super(nomeLoja, preço, descrição),
                    this.tipo = tipo
                }

                getDescrição(){
                    return this.descricao + " " + this.tipo
                }

            }


            class Livro extends Produto{
                constructor(nomeLoja, preço, descrição, autor){
                    super(nomeLoja, preço)
                    this.descricao = descrição
                    this.autor = autor
                }
                
                getDescrição(){
                    return this.descricao + ", de " + this.autor
                }

            }

            let pc = new Produto("loja", 12)
            let rato = new Mouse("Kabum", 50, "Mouse ótico, Saída USB. 1.600 dpi", "Gamer")
            let Percy = new Livro("Submarino", 57, "Livro muito bom", "Rick Riordan")
            let ligeirinho = new Mouse("mercado Livre", 14, "Mouse barato que de durar 5 dias", "barato")
            let apolo = new Livro("Americanas", 60, "As provações de apolo: a torre de Nero", "Rick")

            let carrinho = [pc, rato, Percy, ligeirinho, apolo]

            console.log(carrinho[0].getDescrição())
            console.log(carrinho[1].getDescrição())
            console.log(carrinho[2].getDescrição())
            console.log(carrinho[3].getDescrição())
            console.log(carrinho[4].getDescrição())


    erro:
            function somar(n1, n2){
            let soma = n1 + n2
            if(soma % 2 == 0) {
                throw new OddNumberError("o número é par")
            } else console.log(soma)
            console.log("finalizando programa")
        }

        class OddNumberError extends Error{
            constructor(message){
                super(message)
                this.name = "OddNumberError"
            }
        }

        try{
            somar(1, 2)
            somar(1, 1)
        } catch(erro){
            console.log(erro)
        } finally {
            console.log("finalizando programa")
        }


    erroDobrar:
        function dobrar(n){
            if (n.toString() === n) throw new TypeError("O valor deve ser numérico")
            return n * 2
        } 


        try {
            console.log(dobrar(4))
            console.log(dobrar(5))
        } catch (error) {
            console.log(error)
        } finally{
            console.log("Finalizando programa")
        }


    erroUsuario:
            class NameLengthError extends Error{
            constructor(mensagem){
                super(mensagem)
                this.name = "NameLengthError"
            }
        }

        class EmailError extends Error{
            constructor(mensagem){
                super(mensagem)
                this.name = "EmailError"
            }
        }

        class WageError extends Error{
            constructor(mensagem){
                super(mensagem)
                this.name = "WageError"
            }
        }

        class User{
            constructor(nome, mail, salario){
                this.nome = nome
                this.email = mail
                this.salario = salario
            }
        }


        function validaUsuario(user){
            if (user.nome.length < 4) throw new NameLengthError("O nome deve ter no mínimo 4 caracteres")
            if (!user.email.includes("@")) throw new EmailError("O email precisa ser válido")
            if (user.salario < 465) throw new WageError("O salário precisa ser no mínimo R$ 465,00")
            return "O usuario é valido"
        }
        let nomeErr = new User("oba", "email@google", 900)
        let mailErr = new User("oooooooo", "email", 894)
        let salaErr = new User("bom dia", "email@quentemail", 200)


    callback:
            function dobrarEm5Segundos(numero, cb){
            if(isNaN(numero)){
                cb(new Error(`Insira um número.`), 3)
            } else{
                setTimeout(() => {
                let resultado = numero * 2
                cb(null, resultado)
            }, 5000)
            }
        }

        function callback(erro, resultado){
            if(erro){
                console.log(`A operação falhou! ${erro.message}`)
            } else{
                console.log(`A operação foi um grandioso sucesso!!! O resultado é ${resultado}`)
            }
        }


    callback3:
            function obtemUsuarioPeloNome(nome, cb){
                setTimeout(() => {
                    let usuario = vetor.find(pessoa => pessoa.nome === nome)

                    if(!usuario){
                        callback(new UserNotFoundError("Usuário não está cadastrado"))
                    } else{
                        callback(null, usuario)
                    }
                }, 3000)
            }

            function callback(erro, user){
                if (erro){
                    console.log(`Ocorreu um erro! ${erro.message}`)
                } else{
                    console.log(user.nome)
                    console.log(user.idade)
                    console.log(user.email)
                }
            }
            
            class UserNotFoundError extends Error{
                constructor(mensagem){
                    super(mensagem)
                    this.name = "UserNotFoundError"
                }
            }



    Aula 44, promisse:


        promise-ObtemUsuario:
                function obtemUsuarioPeloNome(nome){
                return new Promise((resolve, reject) => {
                    setTimeout(() => {
                    let usuario = vetor.find(pessoa => pessoa.nome === nome)

                    if(!usuario){
                        reject(new UserNotFoundError("Usuário não está cadastrado"))
                    } else{
                        resolve(usuario)
                    }
                }, 3000)
                })


        promise-Dobrar:
            function dobrarEm5Segundos(numero){
                return new Promise((resolve, reject) => {
                    setTimeout(() => {
                    if (isNaN(numero)) {
                        reject(new TypeError("O valor precisa ser numérico"));
                    } else {
                        const dobro = numero * 2;
                        resolve(dobro);
                    }
                    }, 5000);
                })
            }


        wait-ObtemUsuario:
                function obtemUsuarioPeloNome(nome){
                return new Promise((resolve, reject) => {
                    setTimeout(() => {
                    let usuario = vetor.find(pessoa => pessoa.nome === nome)

                    if(!usuario){
                        reject(new UserNotFoundError("Usuário não está cadastrado"))
                    } else{
                        resolve(usuario)
                    }
                }, 3000)
                })
            }

            class UserNotFoundError extends Error{
                constructor(mensagem){
                    super(mensagem)
                    this.name = "UserNotFoundError"
                }
            }


            async function obtendo(){
            try{
                let name = await obtemUsuarioPeloNome("Mar")

                console.log(`nome: ${name.nome}\nidade: ${name.idade}\nemail: ${name.email}`)
            } catch(erro){
                console.log(`Ocorreu um erro! ${erro.message}`)
            }}

            obtendo()


        wait-Dobrar:
                function dobrarEm5Segundos(numero){
                return new Promise((resolve, reject) => {
                    setTimeout(() => {
                    if (isNaN(numero)) {
                        reject(new TypeError("O valor precisa ser numérico"));
                    } else {
                        const dobro = numero * 2;
                        resolve(dobro);
                    }
                    }, 5000);
                })
            }

            async function espera(){
                try {
                    let result = await dobrarEm5Segundos("a")

                    console.log(result)
                } catch (erro) {
                    console.log(`Ocurreu um erro! ${erro.message}`)
                }
            }
            espera()

 
        Validar nomes:
            const fs = require("fs");
            const fsPromises = require("fs/promises");
            const path = require("path");
            const { EOL } = require("os")
            (async () => {
                try {
                    const file = await fsPromises.readFile(path.resolve(__dirname, "exercicioNomes.txt"));
                    let nomes = file.toString("utf-8")
                    console.log(validar(nomes))
                } catch (err) {
                    console.log(err.message);
                }
            })();

            function validar(nomes){ 
                let vetor = nomes.split("\r\n")
                let nomesValidos = []
                for (let i = 0; i < vetor.length; i++) {
                    if(vetor[i][0] == "A"){
                        nomesValidos.push(vetor[i])
                    }
                }
                return nomesValidos
            }